Chapter 1

==

You can compile and run your code on most machines using this trick:

gcc zork.c -o zork && ./zork

&& here means “and then if it’s successful, do this…”

This command will run the new program only if it compiles successfully. If there’s a problem with the compile, it will skip running the program and simply display the errors on the screen.

==

****************************
Chapter 2
****************************
a pointer is just the address of a piece of data in memory

a pointer variable is a variable that stores a memory address




****************************
Chapter 4
****************************
To compile c files to object code witout linking them:

gcc -c *.c


To link all object files together:

gcc *.o -o launch



You can compile your applications really quickly in gcc, as long as 
you keep track of  which files have changed. That’s a tricky thing to 
do, but it’s also pretty straightforward to automate. Imagine you have 
a file that is generated from some other file. Let’s say it’s an object 
file that is compiled from a source file:

thruster.c    --->   thruster.o

How do you tell if  the thruster.o file needs to be recompiled? You just 
look at the timestamps of  the two files. If  the thruster.o file is older 
than the thruster.c file, then the thruster.o file needs to be recreated. 
Otherwise, it’s up to date.

That’s a pretty simple rule. And if  you have a simple rule for 
something, then don’t think about it—automate it…


make is a tool that can run the compile command for you. The 
make tool will check the timestamps of  the source files and the 
generated files, and then it will only recompile the files if  things have 
gotten out of  date. 


Every file that make compiles is called a target. Strictly speaking, 
make isn’t limited to compiling files. A target is any file that is 
generated from some other files. So a target might be a zip archive 
that is generated from the set of  files that need to be compressed.


For every target, make needs to be told two things:

* The dependencies.
Which files the target is going to be generated from.


* The recipe.
The set of  instructions it needs to run to generate the file.


Together, the dependencies and the recipe form a rule. A rule tells 
make all it needs to know to create the target file. 


==


****************************
Chapter 6
****************************
valgrind can monitor the pieces of  data that are allocated 
space on the heap. It works by creating its own fake version 
of  malloc(). When your program wants to allocate some 
heap memory, valgrind will intercept your calls to malloc() 
and free() and run its own versions of  those functions. The 
valgrind version of  malloc() will take note of  which piece of  
code is calling it and which piece of  memory it allocated. When your 
program ends, valgrind will report back on any data that was left 
on the heap and tell you where in your code the data was created.

--

To be able to use valgrind you need to include debug information in your executable
You do so by using the -g switch

gcc -g program_name.c -o program_name

To use valgrind:
valgrind --leak-check=full ./program_name


--

To use malloc:
#include <stdlib.h>
- malloc( sizeof (data_type_name) ) 
- free (pointer_variable_name )



****************************
Chapter 7
****************************


Variadic functions

stdarg.h is a header in the C standard library of the C programming language that allows functions to accept an indefinite number of arguments.

It provides facilities for stepping through a list of function arguments of unknown number and type. C++ provides this functionality in the header cstdarg.

Variadic functions are functions which may take a variable number of arguments and are declared with an ellipsis in place of the last parameter. An example of such a function is printf.

A typical declaration is
int check(int a, double b, ...);

Variadic functions must have at least one named parameter, so, for instance,
char *wrong(...);

is not allowed in C. (In C++, such a declaration is permitted, but not very useful.) In C, a comma must precede the ellipsis; in C++, it is optional.

To access the unnamed arguments, one must declare a variable of type va_list in the variadic function. The macro va_start is then called with two arguments: the first is the variable declared of the type va_list, the second is the name of the last named parameter of the function.

After this, each invocation of the va_arg macro yields the next argument. The first argument to va_arg is the va_list and the second is the type of the next argument passed to the function.

Finally, the va_end macro must be called on the va_list before the function returns. (It is not required to read in all the arguments.)


=======

Every function name is a pointer to the function

Think about what the name of  
a function really is. It’s a way of  referring to the piece 
of  code. And that’s just what a pointer is: a way of 
referring to something in memory.

That’s why, in C, function names are also pointer  
variables. When you create a function called  
go_to_warp_speed(int speed), you are also 
creating a pointer variable called go_to_warp_speed 
that contains the address of  the function. So, if  you give 
find() a parameter that has a function pointer type, you 
should be able to use the parameter to call the function it 
points to. 


Whenever you create a function, 
you also create a function pointer 
with the same name. 

The pointer contains the 
address of the function. 



What does char** mean? Is it a typing error?
char** is a pointer normally used to point to an 
array of strings.




====
hex dump

xxd <file_name> for file hex dump

The right column in the output is the ascii translation of the numbers
==

Microprocessor vs microcontroller
	
A microprocessor generally does not have Ram, ROM and IO pins. It usually uses its pins as a bus to interface to peripherals such as RAM, ROM, Serial ports, Digital and Analog IO. It is expandable at the board level due to this.

A microcontroller is 'all in one', the processor, ram, IO all on the one chip, as such you cannot (say) increase the amount of RAM available or the number of IO ports. The controlling bus is internal and not available to the board designer.

This means that a microprocessor is generally capable of being built into bigger general purpose applications than a microcontroller. The microcontroller is usually used for more dedicated applications.

All of this is very general statements, there are chips available that blur the boundaries.


==


Arduino

An Arduino is a PCB containing an Atmel AVR microcontroller and usually providing a set of connectors in a standard pattern. The microcontroller is typically preprogrammed with a "bootloader" program that allows a program (called a "sketch") to be loaded into the microcontroller over a TTY serial connection (or virtual serial over USB connection) from a PC.
Microprocessor

A microprocessor is an IC that contains only a central processing unit (CPU). The IC does not contain RAM, ROM or other peripherals. The IC may contain cache memory but it is not designed to be usable without any external memory.

Microprocessors cannot store programs internally and therefore typically load software when powered on, this usually involves a complex multi-stage "boot" process where "firmware" is loaded from external ROM and eventually an operating system is loaded from other storage media (e.g. hard disk).

It is typically found in a personal computer.
Microcontroller

A microcontroller is an IC that contains a CPU as well as some amount or RAM, ROM and other peripherals. Microcontrollers can function without external memory or storage.

Normally, microcontrollers are either programmed before being soldered to a PCB or are programmable using In-System-Programming (ISP or ICSP) connectors via a special "programmer" device attached to a personal computer.

Typical microcontrollers are much simpler and slower than typical microprocessors but I believe the distinction is mostly one of scale and application.

It is found, for example, in simple appliances such as basic washing machines.

==

High Address

Stack
Heap
Globals
Constants
Code (after the assembly has changed it to zeros and ones from assembly language)

Low Address


==================

Overloading vs. overriding  

Overriding of functions occurs when one class is inherited from another class. Overloading can occur without inheritance.

Overloaded functions must differ in function signature ie either number of parameters or type of parameters should differ. In overriding, function signatures must be same.

Overridden functions are in different scopes; whereas overloaded functions are in same scope.

Overriding is needed when derived class function has to do some added or different job than the base class function.

Overloading is used to have same name functions which behave differently depending upon parameters passed to them.

What is overriding?
Defining a function in the derived class with same name as in the parent class is called overriding. In C++, the base class member can be overridden by the derived.............


Explain the problem with overriding functions.
Overriding of functions occurs in Inheritance. A derived class may override a base class member function. In overriding, the function names and parameter list are same in both the functions...............


Explain the difference between overloaded functions and overridden functions.
Overloading is a static or compile-time binding and Overriding is dynamic or run-time binding.
Redefining a function in a derived class is called function overriding


=========

POSIX

POSIX an acronym for Portable Operating System Interface,is a family of standards specified by the IEEE Computer Society for maintaining compatibility between operating systems. POSIX defines the application programming interface (API), along with command line shells and utility interfaces, for software compatibility with variants of Unix and other operating systems.

==========


The math library must be linked in when building the executable. How to do this varies by environment, but in Linux/Unix, just add -lm to the command:

gcc test.c -o test -lm
The math library is named libm.so, and the -l command option assumes a lib prefix and .a or .so suffix.

=========

Toolchain

In software, a toolchain is the set of programming tools used to perform a complex task or to create a product, which is typically another computer program or a system of programs. In general, the tools forming a toolchain are used consecutively so the output or resulting environment state of each tool becomes the input or starting environment for the next one, but the term is also used when referring to sets of related tools.

A simple software development toolchain consists of a compiler and linker to transform the source code into an executable program, libraries to provide interfaces to the operating system, and a debugger. A complex product such as a video game needs tools for preparing sound effects, music, textures, 3-dimensional models, and animations, and further tools for combining these resources into the finished product.

A toolchain is a set of distinct software development tools that are linked (or chained) together by specific stages such as GCC, binutils and glibc (a portion of the GNU Toolchain). Optionally, a toolchain may contain other tools such as a Debugger or a Compiler for a specific programming language, such as ,C++. Quite often, the toolchain used for embedded development is a cross toolchain, or more commonly known as a cross compiler.

All the programs (like GCC) run on a host system of a specific architecture (such as x86) but produce binary code (executables) to run on a different architecture (e.g. ARM). This is called cross compilation and is the typical way of building embedded software

When talking about toolchains, one must distinguish three different machines :

* the build machine, on which the toolchain is built
* the host machine, on which the toolchain is executed
* the target machine, for which the toolchain generates code

From these three different machines, we distinguish four different types of toolchain building processes :

* A native toolchain, as can be found in normal Linux distributions, has usually been compiled on x86, runs on x86 and generates code for x86.

* A cross-compilation toolchain, which is the most interesting toolchain type for embedded development, is typically compiled on x86, runs on x86 and generates code for the target architecture (be it ARM, MIPS, PowerPC or any other architecture supported by the different toolchain components)

* A cross-native toolchain, is a toolchain that has been built on x86, but runs on your target architecture and generates code for your target architecture. It's typically needed when you want a native gcc on your target platform, without building it on your target platform.

* A canadian build is the process of building a toolchain on machine A, so that it runs on machine B and generates code for machine C. It's usually not really necessary.


=====

The GNU toolchain 

The GNU toolchain is a broad collection of programming tools produced by the GNU Project. These tools form a toolchain (a suite of tools used in a serial manner) used for developing software applications and operating systems.



Projects included in the GNU toolchain are:

* GNU make: Automation tool for compilation and build;
* GNU Compiler Collection (GCC): Suite of compilers for several programming languages;
* GNU Binutils: Suite of tools including linker, assembler and other tools;
* GNU Bison: Parser generator
* GNU m4: m4 macro processor
* GNU Debugger (GDB): Code debugging tool;
* GNU build system (autotools):
  - Autoconf
  - Autoheader
  - Automake
  - Libtool



======

Compilation Process:
Compiling a program involves many tools, GCC takes care of this by calling other programs to handle each stage of the process.


hello.c -------------> [ preprocessor]  --> preprocessed code file - hello.i
#included header files ->

hello.i ---> [compilier] --> assembly code file - hello.s

hello.s ---> [assembler] --> object code file - hello.o


hello.o ---------------------->   [linker] ---> executable code.hello.exe
library files ---------------->
other object files/modules --->


References:
http://www.tenouk.com/ModuleW.html
http://www.nongnu.org/c-prog-book/online/x972.html

http://faculty.cs.niu.edu/~mcmahon/CS241/Notes/compile.html
http://althing.cs.dartmouth.edu/local/www.acm.uiuc.edu/sigmil/RevEng/ch02.html



==============

Java software for your computer, or the Java Runtime Environment, is also referred to as the Java Runtime, Runtime Environment, Runtime, JRE, Java Virtual Machine, Virtual Machine, Java VM, JVM, VM, Java plug-in, Java plugin, Java add-on or Java download.

Java Runtime Environment (JRE)
The Java Runtime Environment (JRE), also known as Java Runtime, is part of the Java Development Kit (JDK), a set of programming tools for developing Java applications. The Java Runtime Environment provides the minimum requirements for executing a Java application; it consists of the Java Virtual Machine (JVM), core classes, and supporting files


====

A JVM implementation is a computer program that meets the requirements of the JVM specification in a compliant and preferably performant manner. An instance of the JVM is a process that executes a computer program compiled into Java bytecode.


==========

Runtime enviroment refers to the set of things/components one needs to run a program.
These things can include:
- library files
- other programs



========


Distinguish this from Development Environments and Build Environments.

You will tend to find a hierarchy here.

Run - Everything you need to execute a program, but no tools to change it.

Build - Given some code written by someone eveything you need to compile or otherwise prepare an executable that you put into a Run environment. Build environments are pretty useless unless you can tets what you built, so they often include Run too. In Build you can't actually modify the code.

Develop - Everything you need to write code, build it and test it. Code Editors and other such tools. Typically also includes Build and Run.


===============

GDB tutorial

http://www.cs.umd.edu/~srhuang/teaching/cmsc212/gdb-tutorial-handout.pdf

============

cat
The cat command outputs the contents of one more more files.
The general syntax of the cat command is as follows:

$cat file1 file2

When you run this command, cat prints the contents of file1, file2, and any other files that you specify 
(denoted by ...), and then exits. The command is called cat because it performs concatenation when it 
prints the contents of more than one file.


less
The less command comes in handy when a file is really big or when a command’s output is long and scrolls 
off the top of the screen. 
To page through a big file like /usr/share/dict/words, use the command less /usr/share/dict/words. 
When running less, you’ll see the contents of the file one screenful at a time. Press the spacebar to go 
forward in the file and the b key to skip back one screenful. To quit, type q. 

NOTE 
The less command is an enhanced version of an older program named more. Most Linux 
desktops and servers have less, but it’s not standard on many embedded systems and other 
Unix systems. So if you ever run into a situation when you can’t use less, try more.


Shell and Environment Variables
The shell can store temporary variables, called shell variables, containing the values of text strings.

To assign a value to a shell variable, use the equal sign (=). Here’s a simple example: 
$ STUFF=blah 

The preceding example sets the value of the variable named STUFF to blah. To access this variable, use 
$STUFF (for example, try running echo $STUFF)

An environment variable is like a shell variable, but it’s not specific to the shell. All processes on Unix systems 
have environment variable storage. The main difference between environment and shell variables is that the 
operating system passes all of your shell’s environment variables to programs that the shell runs, whereas shell 
variables cannot be accessed in the commands that you run. 

Assign an environment variable with the shell’s export command. For example, if you’d like to make the 
$STUFF shell variable into an environment variable, use the following: 

$ STUFF=blah 
$ export STUFF


==============

In make, a "target" is any file that is generated from some other file(s).
So a target might be a zip archive that is generated from the set of files that need to be compressed.


Every target needs two things:
1. The dependencies: the files the target is going to be generated from
2. The recipe: the set of instructions to generate the target

The dependencies and the recipe form the rule.


If the target has is older than any of its dependencies that the recipe is run.

If a target is included as a command-line argument, that target is updated. If no com-
mand-line targets are given, then the first target in the file is used, called the default
goal.



When make is asked to evaluate a rule, it begins by finding the files indicated by the
prerequisites and target. If any of the prerequisites has an associated rule, make
attempts to update those first. Next, the target file is considered. If any prerequisite
is newer than the target, the target is remade by executing the commands. Each com-
mand line is passed to the shell and is executed in its own subshell. If any of the
commands generates an error, the building of the target is terminated and make exits.
One file is considered newer than another if it has been modified more recently.


==============================
The generic word “compiler” actually refers to a number of different modules/programs.
The main modules of a compiler

1 Preprocessor
2 Compiler
3 Assembler
4 Linker

Source Code -> [Pre-processor] -> Pre-processed source code -> [Compiler] -> Assembly Code
Assembly code - > [Assembler] -> Object Code File (s)  + Libraires -> [Linker] -> Executable Code
https://www.youtube.com/watch?v=VDslRumKvRA




